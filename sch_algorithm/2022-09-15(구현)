{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPqWia08YMlOOS2hJe0ZmxE"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 상하좌우\n","- 이것이 코딩 테스트다. p.110"],"metadata":{"id":"fidIZun8hYV5"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V7iB6t7vmOp_","executionInfo":{"status":"ok","timestamp":1663136106589,"user_tz":-540,"elapsed":3348,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"743dea03-8019-44cb-fb61-7908e6bd240f"},"outputs":[{"name":"stdout","output_type":"stream","text":["5\n"]}],"source":["import numpy as np\n","\n","n = int(input())"]},{"cell_type":"code","source":["moves = input().split()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZquiIBM4o0_2","executionInfo":{"status":"ok","timestamp":1663140272477,"user_tz":-540,"elapsed":4184,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"a98be591-26c6-44c4-cc78-902e88f1f805"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["R R R U D D\n"]}]},{"cell_type":"code","source":["def updownrightleft(n, moves):\n","    row = 1\n","    col = 1\n","    for move in moves:\n","        if move == \"R\":\n","            if col == n:\n","                continue\n","            else:\n","                col += 1\n","        if move == \"L\":\n","            if col == 1:\n","                continue\n","            else:\n","                col -= 1\n","        if move == \"U\":\n","            if row == 1:\n","                continue\n","            else:\n","                row -= 1\n","        if move == \"D\":\n","            if row == n:\n","                continue\n","            else:\n","                row += 1\n","\n","    print(row, col)\n"],"metadata":{"id":"h6_LCZZQrMdG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["updownrightleft(n, moves)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dB3KvD39rOUW","executionInfo":{"status":"ok","timestamp":1663140586342,"user_tz":-540,"elapsed":4,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"c3a2c8c6-3124-4910-db1b-d156e0f0141b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3 4\n"]}]},{"cell_type":"code","source":["# 4-1.py 답안 예시\n","# N을 입력 받기\n","n = int(input())\n","x, y = 1, 1\n","plans = input().split()\n","\n","# L, R, U, D에 따른 이동 방향\n","dx = [0, 0, -1, 1]\n","dy = [-1,1,0,0]\n","\n","move_types = ['L', 'R', 'U', 'D']\n","\n","# 이동 계획을 하나씩 확인\n","for plan in plans:\n","    # 이동 후 좌표 구하기\n","    for i in range(len(move_types)):\n","        if plan == move_types[i]:\n","            nx = x + dx[i]\n","            ny = y + dy[i]\n","\n","    # 공간을 벗어나는 경우 무시\n","    if nx < 1 or ny < 1 or nx > n or ny > n:\n","        continue\n","    # 이동 수행\n","    x, y = nx , ny\n","\n","print(x, y)\n"],"metadata":{"id":"YsRzgCFC514m","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663201561457,"user_tz":-540,"elapsed":26168,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"0e8b950e-6c15-4410-c2ac-79908e627e0a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","R R R U D  D\n","3 4\n"]}]},{"cell_type":"markdown","source":["# 시각\n","- 정수 N이 입력되면 00시 00분 00초부터 N시 59분 59초까지의 모든 시각 중에서 3이 하나라도 포함되는 모든 경우의 수를 구하는 프로그램을 작성하시오. 예를 들어 1을 입력했을 때 다음은 3이 하나라도 포함되어 있으므로 세어야 하는 시각이다.\n","   - 00시 00분 03초\n","   - 00시 13분 30초\n","- 반면에 다음은 3이 하나도 포함되어 있지 않으므로 세면 안되는 시각이다.\n","   - 00시 02분 55초\n","   - 01시 27분 45초\n"],"metadata":{"id":"FQ6kbmqfiSaM"}},{"cell_type":"code","source":["n = int(input())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yBbB-ow0jDDZ","executionInfo":{"status":"ok","timestamp":1663201733367,"user_tz":-540,"elapsed":2667,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"b4f38c21-1243-41b5-c20c-59b5c0f36155"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["5\n"]}]},{"cell_type":"code","source":["def time_count(n):\n","    count = 0\n","    for i in range(n+1):\n","        for j in range(60):\n","            for k in range(60):\n","                time = \"{}시간 {}분 {}초\".format(i,j,k)\n","                if \"3\" in time:\n","                    count += 1\n","    print(count)\n"],"metadata":{"id":"9AANhRuIjFwg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["time_count(n)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZlcRIg2skthg","executionInfo":{"status":"ok","timestamp":1663202163698,"user_tz":-540,"elapsed":5,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"7e18c1a7-797f-4f32-d91a-de13b1d1cd9c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["11475\n"]}]},{"cell_type":"code","source":["# 4-2.py 답안 예시\n","h = int(input())\n","\n","count = 0\n","for i in range(h + 1):\n","    for j in range(60):\n","        for k in range(60):\n","            # 매 시각 안에 '3'이 포함되어 있다면 카운트 증가\n","            if '3' in str(i) + str(j) + str(k):\n","                count += 1\n","\n","print(count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L58zb3-bkvhs","executionInfo":{"status":"ok","timestamp":1663202259708,"user_tz":-540,"elapsed":2596,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"3adf8a7f-cba4-4430-d0fe-86f4ea7b9c68"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","11475\n"]}]},{"cell_type":"markdown","source":["# 왕실의 나이트\n","- 체스판과 같은 8 x 8 좌표 평면\n","- 나이트는 말을 타고 있기 때문에 이동을 할 때 에는 L자 형태로만 이동함\n","- 정원 밖으로는 나갈 수 없으며 특정한 위치에서 다음과 같은 2가지 경우로 이동할수 있음\n","   - 수평으로 두 칸 이동한 뒤에 수직으로 한 칸 이동하기\n","   - 수직으로 두 칸 이동한 뒤에 수평으로 한 칸 이동하기\n","- 행 위치를 표현할 때에는 a ~ h\n","- 열 위치를 표현할 때에는 1 ~ 8"],"metadata":{"id":"2UtK8JJmlGPC"}},{"cell_type":"code","source":["import re\n","knight = input()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CBMmjrJjlbsp","executionInfo":{"status":"ok","timestamp":1663204315208,"user_tz":-540,"elapsed":1509,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"9052b098-1335-48c8-92ad-3761bb08b420"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["c5\n"]}]},{"cell_type":"code","source":["def knight_moves(knight):\n","    import re\n","    row = re.findall('\\d', knight)[0]\n","    col = re.findall('[a-zA-Z]', knight)[0]\n","    moves = [(2,-1), (2, 1), (-2, 1), (-2, -1), (1, 2), (-1, 2), (1, -2), (-1, -2)]\n","    count = 0\n","\n","    for move in moves:\n","        row_number = int(row) + move[0]\n","        col_number = ord(col) + move[1]\n","\n","        if (row_number > 0 and col_number > 96) and (row_number < 9 and col_number <106) and (row_number > 0 and col_number <106) and (row_number < 9 and col_number > 96):\n","            count += 1 \n","\n","\n","    print(count)\n"],"metadata":{"id":"-j0DItKnmnu9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["knight_moves(knight)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cgTBigGls1c9","executionInfo":{"status":"ok","timestamp":1663204318345,"user_tz":-540,"elapsed":386,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"851b164e-ec91-42a1-976c-79f4d47362e0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["8\n"]}]},{"cell_type":"code","source":["# 4-3.py 답안 예시\n","# 현재 나이트의 위치 입력 받기\n","input_data = input()\n","row = int(input_data[1])\n","column = int(ord(input_data[0])) - int(ord('a')) + 1\n","\n","# 나이트가 이동할 수 있는 8가지 방향 정의\n","steps = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)]\n","\n","# 8가지 방향에 대하여 각 위치로 이동이 가능한지 확인\n","result = 0\n","for step in steps:\n","    # 이동하고자 하는 위치 확인\n","    next_row = row + step[0]\n","    next_column = column + step[1]\n","    # 해당 위치로 이동이 가능하다면 카운트 증가\n","    if next_row >= 1 and next_row <= 8 and next_column >= 1 and next_column <= 8:\n","        result += 1\n","\n","print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EVWSvP2_n-fc","executionInfo":{"status":"ok","timestamp":1663204214182,"user_tz":-540,"elapsed":2604,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"281bc667-d248-450a-f97b-480aa03ec6cb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["c5\n","8\n"]}]},{"cell_type":"markdown","source":["# 게임 개발\n","- 현민이는 게임 캐릭터가 맵 안에서 움직이는 시스템을 개발 중이다.\n","- 캐릭터가 있는 장소는 1 X 1 크기의 정사각형으로 이뤄진 N X M 크기의 직사각형으로, 각각의 칸은 육지 또는 바다이다. 캐릭터는 동서 남북 중 한곳을 바라본다.\n","- 각 칸은 (A, B)로 나타낼 수 있고, A는 북쪽으로부터 떨어진 칸의 개수, B는 서쪽으로부터 떨어진 칸의 개수이다.\n","- 캐릭터의 움직임을 설정하기 위해 정해 놓은 매뉴얼\n","1. 현재 위치에서 현재 방향을 기준으로 왼쪽 방향(반시계 방향으로 90도 회전한 방향)부터 차례대로 갈 곳을 정함\n","2. 캐릭터의 바로 왼쪽 방향에 아직 가보지 않은 칸이 존재한다면, 왼쪽 방향으로 회전한 다음 한 칸을 전진한다. 왼쪽 방향에 가보지 않은 칸이 없다면, 왼쪽 방향으로 회전만 수행하고 1단계로 돌아간다.\n","3. 만약 네 방향 모두 이미 가본 칸이거나 바다로 되어 있는 칸인 경우에는, 바라보는 방향을 유지한 채로 한 칸 뒤로 가고 1단계로 돌어간다. 단, 이 때 뒤쪽 방향이 바다인 칸이라 뒤로 갈 수 없는 경우에는 움직임을 멈춘다.\n","\n","입력 조건\n","- 첫째 줄에 맵의 세로 크기 N과 가로 크기 M을 고백으로 구분하여 입력\n","- 둘째 줄에 게임 캐릭터가 있는 칸의 좌표 (A, B)와 바라보는 방향 d가 각각 서로 공백으로 구분하여 주어진다. 방향 d의 값으로는 다음과 같이 4가지가 존재\n","- 0 : 북쪽, 1: 동쪽, 2: 남쪽, 3: 서쪽\n","- 셋째 줄부터 맵이 육지인지 바다인지에 대한 정보가 주어짐. N개의 줄에 맵의 상태가 북쪽부터 남쪽 순서대로, 각 줄의 데이터는 서쪽부터 동쪽 순서대로 주어진다. 맵의 외곽은 항상 바다로 되어 있다.\n","- 0 : 육지, 1 : 바다"],"metadata":{"id":"lt-iPMhUsYAO"}},{"cell_type":"code","source":["n, m = map(int, input().split())\n","a, b, d = map(int, input().split())\n","array = []\n","for i in range(n):\n","    data = input().split()\n","    array.append(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"suc7yg6jHKDn","executionInfo":{"status":"ok","timestamp":1663219470289,"user_tz":-540,"elapsed":15794,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"1a1a1152-9fe9-47af-f5e1-a77a2188f917"},"execution_count":70,"outputs":[{"name":"stdout","output_type":"stream","text":["4 4\n","1 1 0\n","1 1 1 1\n","1 0 0 1\n","1 1 0 1\n","1 1 1 1\n"]}]},{"cell_type":"code","source":["dx = [-1,0,1,0]\n","dy = [0,1,0,-1]\n","\n","game_array = [[0]*m for x in range(n)]\n","game_array[a][b] = 1\n","print(game_array)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JHomPKVkIyjn","executionInfo":{"status":"ok","timestamp":1663219471791,"user_tz":-540,"elapsed":5,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"16dd443e-337c-4e92-cf99-65ead33f033e"},"execution_count":71,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n"]}]},{"cell_type":"code","source":["directions = [0, 3, 2, 1]\n","while True:\n","    for direction in directions:\n","        next_a = a + dx[direction]\n","        next_b = b + dy[direction]\n","        if game_array[next_a][next_b] == 0 and array[next_a][next_b] == 0:\n","            game_array[next_a][next_b] = 1\n","            a = next_a\n","            b = next_b\n","            move_direction = direction\n","    if a == next_a - dx[direction] and b == next_b - dy[direction]:\n","        if array[direction-1][direction-1] == 1:\n","            break\n","        direction -= 1\n","        a = a + dx[direction]\n","        b = b + dx[direction]\n","        print([sum(i) for i in game_array])\n","\n","\n","\n","    \n","\n","\n","    \n","    \n","    \n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Lyc0m2gZK5Nx","executionInfo":{"status":"error","timestamp":1663219473674,"user_tz":-540,"elapsed":516,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"72d27a9a-5cd6-46be-d4a2-3cdaec00d98b"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","1\n","0\n","2\n","1\n","1\n","2\n","[0, 1, 0, 0]\n","-1\n","0\n","0\n","-1\n","1\n","0\n","0\n","1\n","[0, 1, 0, 0]\n","-2\n","-1\n","-1\n","-2\n","0\n","-1\n","-1\n","0\n","[0, 1, 0, 0]\n","-3\n","-2\n","-2\n","-3\n","-1\n","-2\n","-2\n","-1\n","[0, 1, 0, 0]\n","-4\n","-3\n","-3\n","-4\n","-2\n","-3\n","-3\n","-2\n","[0, 1, 0, 0]\n","-5\n","-4\n"]},{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-72-27c66232a637>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[0mnext_b\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mdy\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdirection\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnext_b\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0mgame_array\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnext_a\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnext_b\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnext_a\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnext_b\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m             \u001b[0mgame_array\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnext_a\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnext_b\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m             \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext_a\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: list index out of range"]}]},{"cell_type":"code","source":["# 4-4.py 답안 예시\n","# N, M을 공백으로 구분하여 입력받기\n","n, m = map(int, input().split())\n","\n","# 방문한 위치를 저장하기 위한 맵을 생성하여 0으로 초기화\n","d = [[0] * m for _ in range(n)]\n","\n","# 현재 캐릭터의 X 좌표, Y  좌표, 방향을 입력받기\n","x, y, direction = map(int, input().split())\n","d[x][y] = 1 # 현재 좌표 방문 처리\n","\n","# 전체 맵 정보를 입력받기\n","array = []\n","for i in range(n):\n","    array.append(list(map(int, input().split())))\n","\n","# 북, 동, 남, 서 방향 정의\n","dx = [-1,0,1,0]\n","dy = [0,1,0,-1]\n","\n","# 왼쪽으로 회전\n","def turn_left():\n","    global direction\n","    direction -= 1\n","    if direction == -1:\n","        direction = 3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AnpYlKGEmGei","executionInfo":{"status":"ok","timestamp":1663221825679,"user_tz":-540,"elapsed":18010,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"4911e676-67cb-4453-d580-d84537822d52"},"execution_count":76,"outputs":[{"name":"stdout","output_type":"stream","text":["4 4\n","1 1 0\n","1 1 1 1\n","1 0 0 1\n","1 1 0 1\n","1 1 1 1\n"]}]},{"cell_type":"code","source":["# 시뮬레이션 시작\n","count = 1\n","turn_time = 0\n","while True:\n","    # 왼쪽으로 회전\n","    turn_left()\n","    nx = x + dx[direction]\n","    ny = y + dy[direction]\n","    # 회전한 이후 정면에 가보지 않은 칸이 존재하는 경우 이동\n","    if d[nx][ny] == 0 and array[nx][ny] == 0:\n","        d[nx][ny] = 1\n","        x = nx\n","        y = ny\n","        count += 1\n","        turn_time = 0\n","        continue\n","    # 회전한 이후 정면에 가보지 않은 칸이 없거나 바다인 경우\n","    else:\n","        turn_time += 1\n","    # 네 방향 모두 갈 수 없는 경우\n","    if turn_time == 4:\n","        nx = x - dx[direction]\n","        ny = y - dy[direction]\n","        # 뒤로 갈 수 있다면 이동하기\n","        if array[nx][ny] == 0:\n","            x = nx\n","            y = ny\n","        # 뒤가 바다로 막혀있는 경우\n","        else:\n","            break\n","        turn_time = 0\n","\n","print(count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CDw8iN3toKcK","executionInfo":{"status":"ok","timestamp":1663221924093,"user_tz":-540,"elapsed":482,"user":{"displayName":"이준영","userId":"14894232288140235299"}},"outputId":"68b56cc1-d3c8-4d2a-85f9-712a518bc7c7"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n"]}]},{"cell_type":"code","source":["\n","\n"],"metadata":{"id":"ubDlrhZKo8wD"},"execution_count":null,"outputs":[]}]}